version: 2.1


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            

jobs:
  build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build] 
        - run:
            name: Build front-end
            command: |
              cd frontend
              npm install
              npm run build
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [frontend-build] 
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [frontend-build] 
      - run:
          name: Front-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Tar And gzip
          command: yum install -y gzip tar
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > inventory.txt
            aws ec2 describe-instances --query "Reservations[*].Instances[*].[PublicIpAddress]" --filter "Name=tag:project,Values=udapeople" --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
    
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install Tar And gzip
          command: |
            apk add --update gzip
            apk add --update tar
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install 
      - add_ssh_keys:
          fingerprints:
            - "9b:18:fd:dd:b1:d8:14:e1:6c:22:a1:8a:f1:39:58:b4"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      #- deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure 
      #    requires: [deploy-infrastructure]
          


 